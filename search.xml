<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arcgis加载带?的转发服务</title>
      <link href="2021/04/22/Arcgis%E5%8A%A0%E8%BD%BD%E5%B8%A6-%E7%9A%84%E8%BD%AC%E5%8F%91%E6%9C%8D%E5%8A%A1/"/>
      <url>2021/04/22/Arcgis%E5%8A%A0%E8%BD%BD%E5%B8%A6-%E7%9A%84%E8%BD%AC%E5%8F%91%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>&nbsp;&nbsp;&nbsp;&nbsp;项目是用vue做的政府项目，有个需求是加载国土空间信息平台的Arcgis服务，这个申请下来是带ip的http请求，出于安全性考虑，政务网ip需要授权才能请求该服务，但是又不可能每个浏览器端都这么整，所以需要用国土空间信息平台的转发代理，地址形似于 httpsAddr/proxy?realAddr，前面的httpsAddr是政务网访问通用的。<br>&nbsp;&nbsp;&nbsp;&nbsp;问题就来了，这个?会被解析成queryParam的分隔符，相当于把realAddr看成了查询参数的键，值为空字符串。这个解析过程在esri-leaflet中也有，另外，Arcgis3.x与Arcgis4.x的解析不太一样。</p><h3 id="API差异"><a href="#API差异" class="headerlink" title="API差异"></a>API差异</h3><p>除了地址外，手头上的数据还有服务类型，所以首先，需要先将调用加载服务的API对应情况搞清楚。在调试时，我是凭百度和猜词义的，今天又看了下arcgis文档，找到了对应关系的说明：<br><a href="https://developers.arcgis.com/javascript/latest/functionality-matrix/#esrilayers">https://developers.arcgis.com/javascript/latest/functionality-matrix/#esrilayers</a><br>3.x中ArcGISDynamicMapServiceLayer、DynamicLayer对应4.x的MapImageLayer<br>3.x中ArcGISTiledMapServiceLayer对应4.x的TileLayer<br>还有个ImageLayer没用到，我是直接作为img.src放上去的，效果还可以。<br><strong>下文均以Arcgis4.x为例</strong></p><h3 id="vue加载arcgis模块"><a href="#vue加载arcgis模块" class="headerlink" title="vue加载arcgis模块"></a>vue加载arcgis模块</h3><p>vue加载arcgis模块并不是npm直接下载依赖包，而是安装了esri-loader模块，这个模块会动态请求<a href="https://js.arcgis.com/version">https://js.arcgis.com/version</a> 的依赖，有点像require，但是是require远程的。</p><pre class=" language-JavaScript"><code class="language-JavaScript">esriLoader.loadModules('esri/request', 'esri/core/promiseUtils', 'esri/core/urlUtils'])      .then(([request, promiseUtils, urlUtils]) => { some code })</code></pre><p>这种按需加载的方式效率很好，不会占用项目体积。而且，这样请求是有缓存的，也是一个小坑，后面再提。</p><h3 id="修改原型"><a href="#修改原型" class="headerlink" title="修改原型"></a>修改原型</h3><p>直接上结果，过程也忘了，还挺曲折的。</p><pre class=" language-JavaScript"><code class="language-JavaScript">// methods{  addTileLayer(id, url) {    esriLoader.loadModules(['esri/layers/TileLayer', 'esri/request', 'esri/core/promiseUtils', 'esri/core/urlUtils'])      .then(        ([TileLayer, request, w, urlUtils]) => {          urlUtils.addQueryParameters = function (b, d) {            if (!d || Object.keys(d).length === 0) {              return b            } else {              for (let pkey in d) {                if (d.hasOwnProperty(pkey) && d[pkey]) {                  let value = d[pkey]                  b += `${pkey}=${value}&`                }              }              return b.substr(0, b.length - 1)            }          }          Object.defineProperty(TileLayer.prototype, "url", {            set: function (a) {              this._set('url', a)            },            enumerable: !0,            configurable: !0          })          TileLayer.prototype._fetchService = function (a) {            var b = this            return w.create(function (d, e) {              if (b.sourceJSON) {                d({ data: b.sourceJSON })              } else {                if (!b.parsedUrl) throw new c('tile-layer:undefined-url',                  'layer\'s url is not defined')                // 修改url部分                request(url + '?f=json', {                  responseType: 'json',                  signal: a                }).then(d, e)              }            }).then(function (c) {              c.ssl && (b.url = b.url.replace(/^http:/i, 'https:'))              b.sourceJSON = c.data              b.read(c.data, { origin: 'service', url: b.parsedUrl })              if (10.1 === b.version && !P.isHostedAgolService(b.url)) return b._fetchServerVersion(b.url, a).then(function (a) {                b.read({ currentVersion: a })              }).catch(function () {              })            })          }          TileLayer.prototype.getTileUrl = function (level, row, col) {            return this.url + '/tile/' + level + '/' + row + '/' + col          }          this.arcGisLayer = null          let layer = new TileLayer({            id: id,            url: url          })          this.map.layers.add(layer)          this.arcGisLayerList[id] = layer        })  },  addDynamicLayer(id, url) {    esriLoader.loadModules([      'esri/layers/MapImageLayer',      'esri/request', 'esri/core/promiseUtils', 'esri/core/tsSupport/awaiterHelper',      'esri/core/tsSupport/generatorHelper', 'esri/core/tsSupport/assignHelper', 'esri/core/Error'    ]).then((      [MapImageLayer, q, x, t, d, k, p]) => {      MapImageLayer.prototype._fetchService = function (a) {        return t(this, void 0, void 0, function () {          var b, e, f;          return d(this, function (d) {            switch (d.label) {              case 0:                return this.sourceJSON ? (this.read(this.sourceJSON, {                  origin: "service",                  url: this.parsedUrl                }), [2]) :                  [4, q(url + '?f=json', { signal: a })];              case 1:                b = d.sent();                e = b.data;                if (f = b.ssl)                  this.url = this.url.replace(/^http:/i, "https:");                this.sourceJSON = e;                // 修改url部分                this.read(e, {                  origin: "service",                  url: url                });                return [2]            }          })        })      }      MapImageLayer.prototype.fetchImage = function (a, b, d, e) {        var f = {          responseType: "image"        };        e && e.timestamp && (f.query = {          _ts: e.timestamp        });        e && e.signal && (f.signal = e.signal);        // 加了个？        var g = url + "/export?";        a = k({}, {}, this.createExportImageParameters(a, b, d, e), {          f: "image",          _ts: this.alwaysRefetch ? Date.now() : null        });        if (null != a.dynamicLayers && !this.capabilities.exportMap.supportsDynamicLayers)          return x.reject(new p("mapimagelayer:dynamiclayer-not-supported", "service " + this.url + " doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.", {            query: a          }));        f.query = f.query ? k({}, a, f.query) : a;        // 新增        f.query.dynamicLayers && delete f.query.dynamicLayers        return q(g, f).then(function (a) {          return a.data        }).catch(function (a) {          if (x.isAbortError(a))            throw a;          throw new p("mapimagelayer:image-fetch-error", "Unable to load image: " + g, {            error: a          });        })      }      this.arcGisLayer = null      let layer = new MapImageLayer({        id: id,        url: url      })      this.map.layers.add(layer)      this.arcGisLayerList[id] = layer    })  }}</code></pre><p>修改部分主要在于_fetchService，将其request的url参数（原为this.url）修改为原始url，当然也可以修改this.url的set处理，示例里简单粗暴地完全赋值，实际也没用到。<br>_fetchService之后，TileLayer会调用getTileUrl获取瓦片数据，这里除了重写getTileUrl，还要重写urlUtils.addQueryParameters，具体过程有点迂回，在request的内部处理里面。<br>到addQueryParameters时，原来会解析成realAddr=，我当时的处理是直接改成</p><pre class=" language-JavaScript"><code class="language-JavaScript">// b是url，d是参数对象urlUtils.addQueryParameters = function (b, d) {    return b}</code></pre><p>也确实没问题，图个省事，d为空对象，当时也没有请求带参数的情况。<br>但是由于请求缓存的原因，这里的改动相当于全局修改，urlUtils是esri/core下的工具类。<br>而MapImageLayer在_fetchService之后会调用fetchImage，这个方法的请求是带参的，在request时也调用了addQueryParameters，所以就出了问题。最终是改成了最终结果那样。<br><strong>至此，Arcgis加载带?的转发服务的实现思路就完了。</strong><br>虽然产出成果不多，但也花了好几天时间，主要是压缩源码看的太费精力了，一是单字母的含义需要对应require的模块，二是三目表达式太多了，还带括号换行的，很容易漏掉断点，最难的是request部分的断点，跟进到addQueryParameters花了很多时间。不过好在肝出来了，下次看源码会更有经验一些。</p>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Arcgis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java利用freemarker生成word报告</title>
      <link href="2021/04/22/Java%E5%88%A9%E7%94%A8freemarker%E7%94%9F%E6%88%90word%E6%8A%A5%E5%91%8A/"/>
      <url>2021/04/22/Java%E5%88%A9%E7%94%A8freemarker%E7%94%9F%E6%88%90word%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>需求：项目要求在检测过程完成后可导出相应的检测报告。</p><h3 id="准备ftl模板"><a href="#准备ftl模板" class="headerlink" title="准备ftl模板"></a>准备ftl模板</h3><p>制作过程为：</p><ol><li>将word文档另存为.xml格式</li><li>将xml后缀改为ftl后缀</li><li>修改插值，将变量部分改为${ varName }的格式。</li></ol><p>如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/24531434-2aeae3da81a35bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="freemarker插值.png"><br>注意：</p><ol><li> 有可能出现插值变量的{}分割的情况，要手动调整，保证${ varName }在一个标签内</li><li>转储乱码，编码格式不一致，需要转码</li><li>这里只列了单个插值，如果结合到循环判断等语法，需要对标签有一点熟悉程度</li></ol><p>freemarker手册  <a href="http://freemarker.foofun.cn/">http://freemarker.foofun.cn/</a></p><h3 id="将数据导入模板"><a href="#将数据导入模板" class="headerlink" title="将数据导入模板"></a>将数据导入模板</h3><p>数据格式为Map，key就是模板里的插值名称，如果缺少模板里的插值名称，控制台会报错（freemarker的报错一般比较好定位，都会指明原因和位置）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 将data写入模板* @param templetePath：模板文件路径* @param templeteName：模板文件名* @param filename：目标文件名* @param data：要写入模板文件的数据*/</span><span class="token keyword">public</span> File <span class="token function">writeAnnualReport</span><span class="token punctuation">(</span>String templetePath<span class="token punctuation">,</span> String templeteName<span class="token punctuation">,</span> String filename<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      * 加载模板      */</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置模板加载路径</span>        configuration<span class="token punctuation">.</span><span class="token function">setDirectoryForTemplateLoading</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>templetePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Template templete <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span>templeteName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个向目标文件写的流</span>        Writer writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据填充到模板并写入目标文件</span>        templete<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写完关闭流</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TemplateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> file<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configuration<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>configuration的初始化貌似有新的方法，IDE指出方法过时，不过这样也能用。</p><h3 id="导出报告"><a href="#导出报告" class="headerlink" title="导出报告"></a>导出报告</h3><p>这里已经拿到file内容了，剩下的就是传给前端，项目里有下载文件接口的，也可以把文件放到固定的目录下。<br>实现下载接口就不赘述了，就是向response里写入数据，前端接收是Blob数据，下载用隐式a.href = 下载接口完成。</p>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo识别花括号</title>
      <link href="2021/04/21/hexo%E8%AF%86%E5%88%AB%E8%8A%B1%E6%8B%AC%E5%8F%B7/"/>
      <url>2021/04/21/hexo%E8%AF%86%E5%88%AB%E8%8A%B1%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>今天换了个hexo地址，也遇到了hexo转义”{}”的问题，记录一下解决方法。</p><ul><li><p>使用highlight.js<br><a href="https://www.bingwong.org/HEXO/%E4%BF%AE%E5%A4%8Dhexo%E8%8A%B1%E6%8B%AC%E5%8F%B7%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2123%E5%92%8C125/">highlight.js</a></p></li><li><p>使用hexo-prism-plugin<br>修改node_modules\hexo-prism-plugin\src\index.js的map<br><a href="https://blog.csdn.net/xingranzhihuo/article/details/113830311">hexo-prism-plugin</a></p></li></ul><p>不过我的问题不止如此：<br><img src="/medias/assets/1.png" alt="问题"><br>我少写了一个“’”，导致配置、修改方法都一致的情况下，还是有问题，可能是render阶段出错了。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 隐式转换</title>
      <link href="2021/04/21/JS-%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>2021/04/21/JS-%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>今天在复习隐式转换的时候发现了一些盲点，首先简要回顾一下隐式转换规则。</p><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><p>加号，既可以是算术运算符，也可以是字符串连接符，规则为：</p><ul><li>只要有一边是字符串，则是字符串连接符</li><li>两边都是数字，才是算术运算符</li></ul><p>如果是其他类型，则调用相应的toString和Number()方法转换得到可运算的值。<br>一些特殊的toString和Number转换结果：<br>{ 1: 2 } // “[object Object]” NaN<br>[1, 2] // “1,2”  NaN<br>function fn(){} // function函数体  NaN<br>undefined、null、true、false，toString均为本身的字符串，Number结果分别为NaN、0、1、0</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'true'</span> <span class="token comment" spellcheck="true">// "1true"</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>以上就是之前我对+隐式转换的了解，特殊类型+数字用Number，特殊类型+字符串用toString。</p><p>不过今天乱组合的时候发现了这样的情况</p><pre class=" language-javascript"><code class="language-javascript">alert <span class="token operator">+</span> <span class="token string">''</span><span class="token comment" spellcheck="true">// "function alert() { [native code] }"</span>alert <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// "function alert() { [native code] }1"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token comment" spellcheck="true">// "1,2"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// "1,21"</span></code></pre><p>function和array在+运算时只会进行字符串拼接操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token comment" spellcheck="true">// 0</span><span class="token string">''</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// "[object Object]"</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 1</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// "1[object Object]"</span></code></pre><p>当{}在左边时，+总会被当成算术运算；当{}在右边时，+总会被当成字符串连接；无论另一边是什么类型。<br>这两个新规则也算是新盲点get。</p><p>隐式转换其他规则：</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>只有一边是string，将其他数据类型用Number进行转换再比较;<br>当两边都是string，比较其Unicode编码，string.charCodeAt;<br>如果是多字符，则依次比较：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">></span> <span class="token string">'10'</span> <span class="token comment" spellcheck="true">// false 转成数字 2 > 10</span><span class="token string">'2'</span> <span class="token operator">></span> <span class="token string">'10'</span> <span class="token comment" spellcheck="true">// true 都是字符串，比较'2'和'1'的Unicode编码</span><span class="token string">'abc'</span> <span class="token operator">></span> <span class="token string">'aad'</span> <span class="token comment" spellcheck="true">// 第一位相等，比较第二位，'b' > 'a'，所以true</span></code></pre><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>也就是最开始提到的对象、数组计算，规则是：<br>先用valueOf获取其原始值，如果不是Number类型（一般都不是，除非改写），则调用toString转成字符串，再转成number。转成什么类型视操作符及另一端决定。<br>经典题目：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'amazing'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a = ?</span><span class="token comment" spellcheck="true">// answer</span>a <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    valueOf<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">++</span>a<span class="token punctuation">.</span>i    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这些也只是作为了解，知道复杂数据类型在隐式转换的过程中经历了哪些操作。</p><h3 id="-1"><a href="#-1" class="headerlink" title="=="></a>==</h3><ul><li>!是Boolean()格式化比较，只要出现了，就都要转成布尔值比较。</li><li>都是引用类型，比较地址</li></ul><p>[] 和 {} 转换结果都是true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// true 根据toString的结果，[]->""，Number("") -> 0 == 0</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// true ![]->false == 0</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// true []->""->0 == false&lt;-![]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// false 比较地址</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// false {}->"[object Object]" != !{}->false</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// false 比较地址</span></code></pre><p>学习隐式转换并不是在开发中偷工减料，而是防止误操作，以及了解这些原理能够更好地纠错。</p>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash</title>
      <link href="2021/02/26/lodash/"/>
      <url>2021/02/26/lodash/</url>
      
        <content type="html"><![CDATA[<p>将lodash中比较常用且原生写法比较复杂的，或是官方文档（中文版）中描述不是很易懂的方法记录下来。</p><h2 id="数组篇"><a href="#数组篇" class="headerlink" title="数组篇"></a>数组篇</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 原数组</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="dropWhile"><a href="#dropWhile" class="headerlink" title="dropWhile"></a>dropWhile</h3><p>官方的描述和例子都让人很疑惑，不如方法名实在——左过滤和右过滤<br>参数：<br>1、原数组<br>2、过滤条件</p><pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// return [3, 4, 5, 4, 3, 2, 1]</span>_<span class="token punctuation">.</span><span class="token function">dropRightWhile</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// return [1, 2, 3, 4, 5, 4, 3]</span></code></pre><p>该方法是有break的，实用价值应该不大。</p><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>实为filter三连</p><ul><li>difference(array, [filter])<br>直接判断是否与过滤数组中的元素相等<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 4, 5, 4, 1]</span></code></pre></li><li>differenceBy(array, [filter], iteratee)<br>比较前用iteratee包装，再比较是否相等<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">differenceBy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// return [3, 4, 5, 4, 3]</span></code></pre>这里a中的元素也会用Math.floor处理一遍，不过原数组都是整数，所以看不出来</li><li>differenceWith(array, [filter], comparator)<br>与differenceBy不同，这个更贴近于difference，comparator接收原数组和过滤数组的元素，比较进行返回，也就是不限制只能等于。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">differenceWith</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">4.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v1 <span class="token operator">></span> v2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 2, 1]</span></code></pre>v1是原数组元素，v2是过滤数组元素，这里应该是个嵌套循环，每个a.ele都需要满足comparator返回false才能不被过滤，比如3，只满足3 &gt; 4.1为false，不满足3 &gt; 2.1为false，所以被过滤了。</li></ul><p>注：这里可以看出来lodash函数的命名风格，后面也有类似的——funName是原功能，funNameBy是（用iteratee）包装元素，funNameWith是自定义比较规则，一般用于比较对象数组。<br>总结：实用性来看，difference会比较有用，其他情况下（对象数组的复杂过滤）我更可能想到的是原生实现。</p><h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>对比原生的flat：<br>_.flatten(a) == a.flat()<br>_.flattenDeep(a) ==  _flattenDepth(a, Infinity) == a.flat(Infinity)<br>_flattenDepth(a, n) == a.flat(n)<br>所以用flat还少打点字，且压平数组的使用场景，目前还没见过。</p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>删除方法，所有相关方法均会改变原数组</p><ul><li>pull<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">pull</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 5, 2, 1]</span></code></pre>要删除的元素依次用，隔开</li><li>without<br>参数规则同pull，但是不会改变原数组<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">without</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 5, 2, 1]</span><span class="token comment" spellcheck="true">// a [1, 2, 3, 4, 5, 4, 3, 2, 1]</span></code></pre></li><li>pullAll<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">pullAll</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 5, 2, 1]</span></code></pre>要删除的元素是一个数组，与call &amp; apply类似。<br>pullAllBy与pullAllWith与前者同。</li><li>pullAt<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">pullAt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// return [1, 3]</span><span class="token comment" spellcheck="true">// 原数组变为 [2, 4, 5, 4, 3, 2, 1]</span></code></pre>与前面还是有点区别，参数是删除的元素索引，返回的是删除的元素。</li><li>remove<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// return [1, 3, 5, 3, 1]</span><span class="token comment" spellcheck="true">// 原数组变为 [2, 4, 4, 2]</span></code></pre>同xxxWith，参数是比较规则，这里规则是奇数；同pullAt，返回值是删除的元素，原数组会变。<br>pull系列实用价值很不错，用起来相比于原生实现会简短很多。</li></ul><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p>按关联性来说，应该放到drop后面，即过滤的反面，笔记顺序按照官网列的来。<br>本系列所有方法均不改变原数组。</p><ul><li>take(arr, n = 1)<br>相当于a.slice(0, n)<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1]</span>_<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 3]</span></code></pre></li><li>takeRight(arr, n = 1)<br>相当于a.slice(-n)<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1]</span>_<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [3, 2, 1]</span></code></pre></li><li>takeWhile &amp; takeRightWhile(arr, callback)<br>当cb返回true时take，返回false时break。</li><li>tail(a)<br>即slice(1)，不同于shift，这个不改变原数组。<br>总结：slice的封装版，可能用惯了slice还不太习惯用这些。</li></ul><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>之前有个求交集的，intersection，没记录，感觉用处不大，这个是用来求并集且去重的。</p><ul><li>union([arrs])<br>参数无限制长度。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 5, 4]</span></code></pre>有By和With，不赘述。</li></ul><h3 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h3><ul><li>uniq(arr)<br>去重，同[…new Set(arr)]<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">uniq</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5]</span></code></pre>有By和With，不赘述。</li></ul><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><ul><li>zip([arrs])<br>不太好描述，有点像矩阵翻转。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'fred'</span><span class="token punctuation">,</span> <span class="token string">'barney'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [['fred', 30, true], ['barney', 40, false]]</span>_<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'fred'</span><span class="token punctuation">,</span> <span class="token string">'barney'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [["fred", 30, true], ["barney", 40, false], [undefined, 50, true], [undefined, undefined, false]]</span></code></pre>如果出现分组的数组长度不一致的情况，以最长的长度为结果数组的长度，分配元素arrN[i]，没有自然是undefined。</li><li>unzip([arrs])<br>与zip相反的作用<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'sv'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'kk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'bs'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'ss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [["sv", "bs", undefined], [1, 2, undefined], ["kk", "ss", undefined]]</span></code></pre></li><li>zipObject(arr1, arr2)<br>这种日常开发很常见，一个是Object.keys，一个是Object.values，这个方法是重组object。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">zipObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {a: 1, b: 2}</span>_<span class="token punctuation">.</span><span class="token function">zipObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {a: 1, b: 2}</span>_<span class="token punctuation">.</span><span class="token function">zipObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {a: 1, b: 2, c: 3, d: undefined}</span></code></pre>结果对象按keyArr.length算，如果keyArr.length &lt; valArr.length，多的值舍去，反之则值用undefined填补。</li><li>zipObjectDeep(arr1, arr2)<br>加了深度的重组object，这种情况不常见，遇到了我应该也会自己遍历。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">zipObjectDeep</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a.b[0].c'</span><span class="token punctuation">,</span> <span class="token string">'a.b[1].d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }</span></code></pre></li><li>zipWith([arrs], iteratee)<br>with类作用都一样，这里列举一种可能的使用场景。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old, salary: ￥</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["My name is Joe, 22 years old, salary: ￥8000.", "My name is John, 25 years old, salary: ￥10000."]</span></code></pre>当某类的实例属性被分组时，可以这样重组使用。</li><li>unzipWith([[arrs]], iteratee)<br>类似zipWith，区别只在于参数1用数组包起来了，类比apply，call。<br>注：如果没有iteratee，unzipWith == upzip，zip同理。<pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">unzipWith</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [3, 30, 300]</span>_<span class="token punctuation">.</span><span class="token function">zipWith</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [3, 30, 300]</span></code></pre>总结：感觉上zipObject和zipWith会比较有用，其他的用处不大。</li></ul><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>symmetric difference，对查等分，指由所有只在两个集合其中之一的元素组成的集合。也就是：先求全集，再剔除交集。</p><pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [3, 4]</span>_<span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [3, 4, 5]</span><span class="token comment" spellcheck="true">// 结果是去重的</span></code></pre><p>有By和With方法。实用性不高。</p><h2 id="集合篇"><a href="#集合篇" class="headerlink" title="集合篇"></a>集合篇</h2><p>看起来还是数组，collection不知道还包含其他什么类型，Set不行。</p><h3 id="countBy-col-iteratee"><a href="#countBy-col-iteratee" class="headerlink" title="countBy(col, iteratee)"></a>countBy(col, iteratee)</h3><p>类似count+groupBy。</p><pre class=" language-javascript"><code class="language-javascript">_<span class="token punctuation">.</span><span class="token function">countBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {1: 2, 2: 1}</span>_<span class="token punctuation">.</span><span class="token function">countBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>floor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {1: 2, 2: 1}</span>_<span class="token punctuation">.</span><span class="token function">countBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {3: 2, 5: 1}</span></code></pre><p>这里总结一下单属性作为iteratee<br>// propName == (ele) =&gt; ele[propName]</p>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> lodash </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
